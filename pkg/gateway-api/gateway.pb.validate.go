// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gateway.proto

package gateway_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SignUpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignUpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignUpRequestMultiError, or
// nil if none found.
func (m *SignUpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLogin()) < 4 {
		err := SignUpRequestValidationError{
			field:  "Login",
			reason: "value length must be at least 4 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := SignUpRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Email

	if len(errors) > 0 {
		return SignUpRequestMultiError(errors)
	}

	return nil
}

// SignUpRequestMultiError is an error wrapping multiple validation errors
// returned by SignUpRequest.ValidateAll() if the designated constraints
// aren't met.
type SignUpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpRequestMultiError) AllErrors() []error { return m }

// SignUpRequestValidationError is the validation error returned by
// SignUpRequest.Validate if the designated constraints aren't met.
type SignUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpRequestValidationError) ErrorName() string { return "SignUpRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpRequestValidationError{}

// Validate checks the field values on SignUpResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignUpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignUpResponseMultiError,
// or nil if none found.
func (m *SignUpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SignUpResponseMultiError(errors)
	}

	return nil
}

// SignUpResponseMultiError is an error wrapping multiple validation errors
// returned by SignUpResponse.ValidateAll() if the designated constraints
// aren't met.
type SignUpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpResponseMultiError) AllErrors() []error { return m }

// SignUpResponseValidationError is the validation error returned by
// SignUpResponse.Validate if the designated constraints aren't met.
type SignUpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpResponseValidationError) ErrorName() string { return "SignUpResponseValidationError" }

// Error satisfies the builtin error interface
func (e SignUpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpResponseValidationError{}

// Validate checks the field values on SignInRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignInRequestMultiError, or
// nil if none found.
func (m *SignInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLogin()) < 4 {
		err := SignInRequestValidationError{
			field:  "Login",
			reason: "value length must be at least 4 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := SignInRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SignInRequestMultiError(errors)
	}

	return nil
}

// SignInRequestMultiError is an error wrapping multiple validation errors
// returned by SignInRequest.ValidateAll() if the designated constraints
// aren't met.
type SignInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInRequestMultiError) AllErrors() []error { return m }

// SignInRequestValidationError is the validation error returned by
// SignInRequest.Validate if the designated constraints aren't met.
type SignInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInRequestValidationError) ErrorName() string { return "SignInRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInRequestValidationError{}

// Validate checks the field values on SignInResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignInResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignInResponseMultiError,
// or nil if none found.
func (m *SignInResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for IsSignedUp

	// no validation rules for IsExist

	if len(errors) > 0 {
		return SignInResponseMultiError(errors)
	}

	return nil
}

// SignInResponseMultiError is an error wrapping multiple validation errors
// returned by SignInResponse.ValidateAll() if the designated constraints
// aren't met.
type SignInResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInResponseMultiError) AllErrors() []error { return m }

// SignInResponseValidationError is the validation error returned by
// SignInResponse.Validate if the designated constraints aren't met.
type SignInResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInResponseValidationError) ErrorName() string { return "SignInResponseValidationError" }

// Error satisfies the builtin error interface
func (e SignInResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInResponseValidationError{}

// Validate checks the field values on UpdateAccessTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccessTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccessTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccessTokenRequestMultiError, or nil if none found.
func (m *UpdateAccessTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccessTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	// no validation rules for Userid

	if len(errors) > 0 {
		return UpdateAccessTokenRequestMultiError(errors)
	}

	return nil
}

// UpdateAccessTokenRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAccessTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccessTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccessTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccessTokenRequestMultiError) AllErrors() []error { return m }

// UpdateAccessTokenRequestValidationError is the validation error returned by
// UpdateAccessTokenRequest.Validate if the designated constraints aren't met.
type UpdateAccessTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccessTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccessTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccessTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccessTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccessTokenRequestValidationError) ErrorName() string {
	return "UpdateAccessTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccessTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccessTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccessTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccessTokenRequestValidationError{}

// Validate checks the field values on UpdateAccessTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccessTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccessTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccessTokenResponseMultiError, or nil if none found.
func (m *UpdateAccessTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccessTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return UpdateAccessTokenResponseMultiError(errors)
	}

	return nil
}

// UpdateAccessTokenResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAccessTokenResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateAccessTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccessTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccessTokenResponseMultiError) AllErrors() []error { return m }

// UpdateAccessTokenResponseValidationError is the validation error returned by
// UpdateAccessTokenResponse.Validate if the designated constraints aren't met.
type UpdateAccessTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccessTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccessTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccessTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccessTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccessTokenResponseValidationError) ErrorName() string {
	return "UpdateAccessTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccessTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccessTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccessTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccessTokenResponseValidationError{}

// Validate checks the field values on IsLoginExistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsLoginExistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsLoginExistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsLoginExistRequestMultiError, or nil if none found.
func (m *IsLoginExistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsLoginExistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	if len(errors) > 0 {
		return IsLoginExistRequestMultiError(errors)
	}

	return nil
}

// IsLoginExistRequestMultiError is an error wrapping multiple validation
// errors returned by IsLoginExistRequest.ValidateAll() if the designated
// constraints aren't met.
type IsLoginExistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsLoginExistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsLoginExistRequestMultiError) AllErrors() []error { return m }

// IsLoginExistRequestValidationError is the validation error returned by
// IsLoginExistRequest.Validate if the designated constraints aren't met.
type IsLoginExistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsLoginExistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsLoginExistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsLoginExistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsLoginExistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsLoginExistRequestValidationError) ErrorName() string {
	return "IsLoginExistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsLoginExistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsLoginExistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsLoginExistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsLoginExistRequestValidationError{}

// Validate checks the field values on IsLoginExistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsLoginExistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsLoginExistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsLoginExistResponseMultiError, or nil if none found.
func (m *IsLoginExistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsLoginExistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsExist

	if len(errors) > 0 {
		return IsLoginExistResponseMultiError(errors)
	}

	return nil
}

// IsLoginExistResponseMultiError is an error wrapping multiple validation
// errors returned by IsLoginExistResponse.ValidateAll() if the designated
// constraints aren't met.
type IsLoginExistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsLoginExistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsLoginExistResponseMultiError) AllErrors() []error { return m }

// IsLoginExistResponseValidationError is the validation error returned by
// IsLoginExistResponse.Validate if the designated constraints aren't met.
type IsLoginExistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsLoginExistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsLoginExistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsLoginExistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsLoginExistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsLoginExistResponseValidationError) ErrorName() string {
	return "IsLoginExistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsLoginExistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsLoginExistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsLoginExistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsLoginExistResponseValidationError{}

// Validate checks the field values on IsEmailExistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsEmailExistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsEmailExistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsEmailExistRequestMultiError, or nil if none found.
func (m *IsEmailExistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsEmailExistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return IsEmailExistRequestMultiError(errors)
	}

	return nil
}

// IsEmailExistRequestMultiError is an error wrapping multiple validation
// errors returned by IsEmailExistRequest.ValidateAll() if the designated
// constraints aren't met.
type IsEmailExistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsEmailExistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsEmailExistRequestMultiError) AllErrors() []error { return m }

// IsEmailExistRequestValidationError is the validation error returned by
// IsEmailExistRequest.Validate if the designated constraints aren't met.
type IsEmailExistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsEmailExistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsEmailExistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsEmailExistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsEmailExistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsEmailExistRequestValidationError) ErrorName() string {
	return "IsEmailExistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsEmailExistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsEmailExistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsEmailExistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsEmailExistRequestValidationError{}

// Validate checks the field values on IsEmailExistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsEmailExistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsEmailExistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsEmailExistResponseMultiError, or nil if none found.
func (m *IsEmailExistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsEmailExistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsExist

	if len(errors) > 0 {
		return IsEmailExistResponseMultiError(errors)
	}

	return nil
}

// IsEmailExistResponseMultiError is an error wrapping multiple validation
// errors returned by IsEmailExistResponse.ValidateAll() if the designated
// constraints aren't met.
type IsEmailExistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsEmailExistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsEmailExistResponseMultiError) AllErrors() []error { return m }

// IsEmailExistResponseValidationError is the validation error returned by
// IsEmailExistResponse.Validate if the designated constraints aren't met.
type IsEmailExistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsEmailExistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsEmailExistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsEmailExistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsEmailExistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsEmailExistResponseValidationError) ErrorName() string {
	return "IsEmailExistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsEmailExistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsEmailExistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsEmailExistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsEmailExistResponseValidationError{}

// Validate checks the field values on ChangeStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeStatusRequestMultiError, or nil if none found.
func (m *ChangeStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	if len(errors) > 0 {
		return ChangeStatusRequestMultiError(errors)
	}

	return nil
}

// ChangeStatusRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeStatusRequestMultiError) AllErrors() []error { return m }

// ChangeStatusRequestValidationError is the validation error returned by
// ChangeStatusRequest.Validate if the designated constraints aren't met.
type ChangeStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeStatusRequestValidationError) ErrorName() string {
	return "ChangeStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeStatusRequestValidationError{}

// Validate checks the field values on ChangeStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeStatusResponseMultiError, or nil if none found.
func (m *ChangeStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeStatusResponseMultiError(errors)
	}

	return nil
}

// ChangeStatusResponseMultiError is an error wrapping multiple validation
// errors returned by ChangeStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeStatusResponseMultiError) AllErrors() []error { return m }

// ChangeStatusResponseValidationError is the validation error returned by
// ChangeStatusResponse.Validate if the designated constraints aren't met.
type ChangeStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeStatusResponseValidationError) ErrorName() string {
	return "ChangeStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeStatusResponseValidationError{}
