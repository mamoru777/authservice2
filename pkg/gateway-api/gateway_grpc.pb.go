// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: gateway.proto

package gateway_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UsrService_SignUp_FullMethodName            = "/api.UsrService/SignUp"
	UsrService_SignIn_FullMethodName            = "/api.UsrService/SignIn"
	UsrService_UpdateAccessToken_FullMethodName = "/api.UsrService/UpdateAccessToken"
	UsrService_IsLoginExist_FullMethodName      = "/api.UsrService/IsLoginExist"
	UsrService_IsEmailExist_FullMethodName      = "/api.UsrService/IsEmailExist"
	UsrService_ChangeStatus_FullMethodName      = "/api.UsrService/ChangeStatus"
)

// UsrServiceClient is the client API for UsrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsrServiceClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	UpdateAccessToken(ctx context.Context, in *UpdateAccessTokenRequest, opts ...grpc.CallOption) (*UpdateAccessTokenResponse, error)
	IsLoginExist(ctx context.Context, in *IsLoginExistRequest, opts ...grpc.CallOption) (*IsLoginExistResponse, error)
	IsEmailExist(ctx context.Context, in *IsEmailExistRequest, opts ...grpc.CallOption) (*IsEmailExistResponse, error)
	ChangeStatus(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error)
}

type usrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsrServiceClient(cc grpc.ClientConnInterface) UsrServiceClient {
	return &usrServiceClient{cc}
}

func (c *usrServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, UsrService_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usrServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, UsrService_SignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usrServiceClient) UpdateAccessToken(ctx context.Context, in *UpdateAccessTokenRequest, opts ...grpc.CallOption) (*UpdateAccessTokenResponse, error) {
	out := new(UpdateAccessTokenResponse)
	err := c.cc.Invoke(ctx, UsrService_UpdateAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usrServiceClient) IsLoginExist(ctx context.Context, in *IsLoginExistRequest, opts ...grpc.CallOption) (*IsLoginExistResponse, error) {
	out := new(IsLoginExistResponse)
	err := c.cc.Invoke(ctx, UsrService_IsLoginExist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usrServiceClient) IsEmailExist(ctx context.Context, in *IsEmailExistRequest, opts ...grpc.CallOption) (*IsEmailExistResponse, error) {
	out := new(IsEmailExistResponse)
	err := c.cc.Invoke(ctx, UsrService_IsEmailExist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usrServiceClient) ChangeStatus(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error) {
	out := new(ChangeStatusResponse)
	err := c.cc.Invoke(ctx, UsrService_ChangeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsrServiceServer is the server API for UsrService service.
// All implementations must embed UnimplementedUsrServiceServer
// for forward compatibility
type UsrServiceServer interface {
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	UpdateAccessToken(context.Context, *UpdateAccessTokenRequest) (*UpdateAccessTokenResponse, error)
	IsLoginExist(context.Context, *IsLoginExistRequest) (*IsLoginExistResponse, error)
	IsEmailExist(context.Context, *IsEmailExistRequest) (*IsEmailExistResponse, error)
	ChangeStatus(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error)
	mustEmbedUnimplementedUsrServiceServer()
}

// UnimplementedUsrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsrServiceServer struct {
}

func (UnimplementedUsrServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedUsrServiceServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedUsrServiceServer) UpdateAccessToken(context.Context, *UpdateAccessTokenRequest) (*UpdateAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessToken not implemented")
}
func (UnimplementedUsrServiceServer) IsLoginExist(context.Context, *IsLoginExistRequest) (*IsLoginExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLoginExist not implemented")
}
func (UnimplementedUsrServiceServer) IsEmailExist(context.Context, *IsEmailExistRequest) (*IsEmailExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEmailExist not implemented")
}
func (UnimplementedUsrServiceServer) ChangeStatus(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}
func (UnimplementedUsrServiceServer) mustEmbedUnimplementedUsrServiceServer() {}

// UnsafeUsrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsrServiceServer will
// result in compilation errors.
type UnsafeUsrServiceServer interface {
	mustEmbedUnimplementedUsrServiceServer()
}

func RegisterUsrServiceServer(s grpc.ServiceRegistrar, srv UsrServiceServer) {
	s.RegisterService(&UsrService_ServiceDesc, srv)
}

func _UsrService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsrServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsrService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsrServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsrService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsrServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsrService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsrServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsrService_UpdateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsrServiceServer).UpdateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsrService_UpdateAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsrServiceServer).UpdateAccessToken(ctx, req.(*UpdateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsrService_IsLoginExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLoginExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsrServiceServer).IsLoginExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsrService_IsLoginExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsrServiceServer).IsLoginExist(ctx, req.(*IsLoginExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsrService_IsEmailExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsEmailExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsrServiceServer).IsEmailExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsrService_IsEmailExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsrServiceServer).IsEmailExist(ctx, req.(*IsEmailExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsrService_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsrServiceServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsrService_ChangeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsrServiceServer).ChangeStatus(ctx, req.(*ChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsrService_ServiceDesc is the grpc.ServiceDesc for UsrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UsrService",
	HandlerType: (*UsrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _UsrService_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _UsrService_SignIn_Handler,
		},
		{
			MethodName: "UpdateAccessToken",
			Handler:    _UsrService_UpdateAccessToken_Handler,
		},
		{
			MethodName: "IsLoginExist",
			Handler:    _UsrService_IsLoginExist_Handler,
		},
		{
			MethodName: "IsEmailExist",
			Handler:    _UsrService_IsEmailExist_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _UsrService_ChangeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
