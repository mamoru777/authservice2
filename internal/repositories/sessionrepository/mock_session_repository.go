// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/mediasoft-internship/internship/mamoru777/authservice/internal/repositories/sessionrepository (interfaces: ISessionRepository)
//
// Generated by this command:
//
//	mockgen -destination mock_session_repository.go -package sessionrepository . ISessionRepository
//
// Package sessionrepository is a generated GoMock package.
package sessionrepository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockISessionRepository is a mock of ISessionRepository interface.
type MockISessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISessionRepositoryMockRecorder
}

// MockISessionRepositoryMockRecorder is the mock recorder for MockISessionRepository.
type MockISessionRepositoryMockRecorder struct {
	mock *MockISessionRepository
}

// NewMockISessionRepository creates a new mock instance.
func NewMockISessionRepository(ctrl *gomock.Controller) *MockISessionRepository {
	mock := &MockISessionRepository{ctrl: ctrl}
	mock.recorder = &MockISessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISessionRepository) EXPECT() *MockISessionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISessionRepository) Create(arg0 context.Context, arg1 *Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockISessionRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISessionRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockISessionRepository) Delete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockISessionRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockISessionRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockISessionRepository) Get(arg0 context.Context, arg1 uuid.UUID) (*Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockISessionRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockISessionRepository)(nil).Get), arg0, arg1)
}

// Update mocks base method.
func (m *MockISessionRepository) Update(arg0 context.Context, arg1 *Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockISessionRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockISessionRepository)(nil).Update), arg0, arg1)
}

// Validate mocks base method.
func (m *MockISessionRepository) Validate(arg0 context.Context, arg1 uuid.UUID, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockISessionRepositoryMockRecorder) Validate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockISessionRepository)(nil).Validate), arg0, arg1, arg2)
}
