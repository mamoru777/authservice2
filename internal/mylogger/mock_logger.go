// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/mediasoft-internship/internship/mamoru777/authservice/internal/mylogger (interfaces: ILogger)
//
// Generated by this command:
//
//	mockgen -destination mock_logger.go -package mylogger . ILogger
//
// Package mylogger is a generated GoMock package.
package mylogger

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockILogger) Init() *os.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(*os.File)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockILoggerMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockILogger)(nil).Init))
}
